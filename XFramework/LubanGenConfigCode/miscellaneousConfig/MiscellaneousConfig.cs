//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.miscellaneousConfig
{ 

public sealed partial class MiscellaneousConfig :  Bright.Config.BeanBase 
{
    public MiscellaneousConfig(JSONNode _json) 
    {
        { if(!_json["Id"].IsNumber) { throw new SerializationException(); }  Id = _json["Id"]; }
        { if(!_json["Params"].IsString) { throw new SerializationException(); }  Params = _json["Params"]; }
        { if(!_json["Desc"].IsString) { throw new SerializationException(); }  Desc = _json["Desc"]; }
        PostInit();
    }

    public MiscellaneousConfig(int Id, string Params, string Desc ) 
    {
        this.Id = Id;
        this.Params = Params;
        this.Desc = Desc;
        PostInit();
    }

    public static MiscellaneousConfig DeserializeMiscellaneousConfig(JSONNode _json)
    {
        return new miscellaneousConfig.MiscellaneousConfig(_json);
    }

    /// <summary>
    /// 杂项配置
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 杂项参数
    /// </summary>
    public string Params { get; private set; }
    /// <summary>
    /// 备注
    /// </summary>
    public string Desc { get; private set; }

    public const int __ID__ = 1748539026;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Params:" + Params + ","
        + "Desc:" + Desc + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
